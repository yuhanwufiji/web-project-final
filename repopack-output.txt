This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-12T03:01:25.431Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  opening.mov
  opening.webm
  scene.webm
  vite.svg
.gitattributes
.gitignore
CameraOrientationState.js
CameraWithMouseRotation.js
counter.js
hotpot.html
index.html
javascript.svg
main copy.js
main.js
model.html
overlay.html
package.json
popup.js
poster.html
showInfoDiv.js
style.css
test.js
video-loader.js
vite.config.js

================================================================
Repository Files
================================================================

================
File: public/opening.mov
================
version https://git-lfs.github.com/spec/v1
oid sha256:85f8c54ac9a1d1d85e5331be876c5c624d633a30c203d71aba2031e89fe4d1ab
size 46837425

================
File: public/opening.webm
================
version https://git-lfs.github.com/spec/v1
oid sha256:3356ae456fc086c6545acf76d804d41d8cb70754d98843769c9b3e5459bba371
size 74908

================
File: public/scene.webm
================
version https://git-lfs.github.com/spec/v1
oid sha256:bf105b91ee2cbf74b43f0f17ce7fd3e02b5eedc995a47948cd9099b73ebcf172
size 3405277

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: .gitattributes
================
*.glb filter=lfs diff=lfs merge=lfs -text
*.webm filter=lfs diff=lfs merge=lfs -text
*.mov filter=lfs diff=lfs merge=lfs -text

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# GLB

final.glb
public/loading.webm
public/next.mov
public/next.webm
public/resturant.mov
public/resturant.webm
public/8.6.glb
public/loading.mov
public/output.mov
public/scene.mov

================
File: CameraOrientationState.js
================
class CameraOrientationState {
    constructor() {
      this.pitchAngle = 0;
      this.yawAngle = 0;
      this.startingPitchAngleForCurrentCoordinates = 0;
      this.startingYawAngleForCurrentCoordinates = 0;
      this.previousPitchAngle = 0;
      this.previousYawAngle = 0;
      this.lastMouseMoveTime = 0;
      this.movementDuration = 100;
    }
  }
  
  export default CameraOrientationState;

================
File: CameraWithMouseRotation.js
================
import * as THREE from 'three'

//Creates a basic Three.js PerspectiveCamera that 
export const PerspectiveCameraForResizableWindow = (cameraFOV, howNearToRender, howFarToRender, renderer) => {
    
    const camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 0.1, 10000); 
   

    //Set the pixel Ratio to be the same as the devices
    renderer.setPixelRatio( window.devicePixelRatio);


    return camera;
}

export const handleMouseMovement = (mouseX, mouseY, cameraOrientationState) => {
    const now = performance.now();

    cameraOrientationState.lastMouseMoveTime = now;

    const rotationScale = 0.05;

    cameraOrientationState.pitchAngle = -(mouseY * rotationScale) * Math.PI;
    cameraOrientationState.yawAngle = -(mouseX * rotationScale) * Math.PI;

    // 限制 pitchAngle 的范围
    const maxPitchAngle = 0;  // 90 度
    const minPitchAngle = -Math.PI / 16; // -90 度

    cameraOrientationState.pitchAngle = Math.max(minPitchAngle, Math.min(maxPitchAngle, cameraOrientationState.pitchAngle));

    // 限制 yawAngle 的范围（如果需要）
    const maxYawAngle = 0;  // 180 度
    const minYawAngle = -Math.PI/4; // -180 度

    cameraOrientationState.yawAngle = Math.max(minYawAngle, Math.min(maxYawAngle, cameraOrientationState.yawAngle));

    cameraOrientationState.startingPitchAngleForCurrentCoordinates = cameraOrientationState.previousPitchAngle;
    cameraOrientationState.startingYawAngleForCurrentCoordinates = cameraOrientationState.previousYawAngle;
}


export const handleCameraRotation = (camera, cameraOrientationState) => {
    const now = performance.now()
  
    const timeElapsed = now - cameraOrientationState.lastMouseMoveTime

    if( timeElapsed < cameraOrientationState.movementDuration){

        const timeLeftPercentage = timeElapsed / cameraOrientationState.movementDuration;
        const minimumDegreeOfChange = 0.05;
        
        // Calculate the interpolation factor based on the time elapsed since the last mouse movement
        let interpolationFactor = Math.max(timeLeftPercentage, minimumDegreeOfChange); 

        // Linearly interpolate the pitch and yaw angles
        const interpolatedPitchAngle = (1 - interpolationFactor) * cameraOrientationState.startingPitchAngleForCurrentCoordinates + interpolationFactor * cameraOrientationState.pitchAngle; //The max value for t will be one, since the time elapsed is the amount of time since the last update. And t will never be more than 1. It goes from 0 to 1 sort of like 0% of elapsed time cycle to 100%
        const interpolatedYawAngle = (1 - interpolationFactor) * cameraOrientationState.startingYawAngleForCurrentCoordinates + interpolationFactor * cameraOrientationState.yawAngle;
        

        camera.rotation.x = interpolatedPitchAngle;
        camera.rotation.y = interpolatedYawAngle;

        // update the previous pitch and yaw angles
        cameraOrientationState.previousPitchAngle = interpolatedPitchAngle;
        cameraOrientationState.previousYawAngle = interpolatedYawAngle;
    }
}

================
File: counter.js
================
export function setupCounter(element) {
  let counter = 0
  const setCounter = (count) => {
    counter = count
    element.innerHTML = `count is ${counter}`
  }
  element.addEventListener('click', () => setCounter(counter + 1))
  setCounter(0)
}

================
File: hotpot.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Persimmons</title>
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Ultra&display=swap");
      @import url("https://fonts.googleapis.com/css2?family=Ultra&family=Roboto+Mono&display=swap");

      body {
        font-family: "Arial", sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        
        background-color: #000000bc;
      
      }

      .container {
        background: url(./img/hotpot.png) no-repeat center center / contain;
        border-radius: 7px;
        /* box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); */
        overflow: hidden;
        width: 1400px;
        height: 604px;
        padding: 20px;
        position: relative;
        top: 0;
        text-align: right;
      }

      .images {
        display: flex;
        justify-content: space-between;
      }

      .image {
        position: absolute;
        display: inline-block;
        opacity: 1;
        transition: opacity 0.3s ease;
      }

      .image img {
        display: block;
        width: 120px; /* Example width, adjust as needed */
        height: auto;
      }

      .overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.8);
        opacity: 0;
        transition: opacity 0.3s;
        pointer-events: none;
      }

      /* Adjust positions for each image and overlay */
      #image1 {
        top: 170px;
        left: 720px;
        width: 150px;
      }
      #image2 {
        top: 400px;
        left: 770px;
        width: 150px;
      }
      #image3 {
        top: 310px;
        left: 870px;
        width: 100px;
      }
      #image4 {
        top: 270px;
        left: 530px;
        width: 125px;
      }
      #image5 {
        top: 450px;
        left: 500px;
        width: 130px;
      }

    

      #overlay1 {
        top: 0;
        left: 135px;
      }
      #overlay2 {
        top: -10px;
        left: 90px;
      }
      #overlay3 {
        top: 0px;
        left: -400px;
      }
      #overlay4 {
        top: 0;
        left: 125px;
      }
      #overlay5 {
        top: -100px;
        left: 125px;
      }

      .attribute {
        text-align: left;
        font-size: 15px;
        font-style: normal;
        font-weight: 400;
        line-height: 120%;
        font-family: "Roboto Mono", monospace;
        width: 577px;
        height: 256px;
        background: url(./img/wbg.png);
        padding: 20px;
        box-sizing: border-box;
      }

      .attribute p {
        margin: 5px;
        font-size: 15px;
        color: #333;
      }

      .attribute h1 {
        font-family: "Ultra", serif;
        font-size: 15px;
        color: #e63d1e;
        margin: 0px;
      }
    </style>
  </head>
  <body>
    <div class="container">

    <div class="images">

      <div class="image" id="image1">
        <img src="./img/beijing.png" alt="Descriptive Alt Text" />
        <div class="overlay" id="overlay1">
          <div class="attribute">
            <h1>Broth</h1>
            <p>
              Usually light, with common varieties including mutton broth and
              clear broth.
            </p>
            <h1>Dipping Sauce</h1>
            <p>
              Generally includes sesame paste, chive flower paste, fermented
              tofu, minced garlic, and chili oil, with a richer flavor.
            </p>
            <h1>Ingredients</h1>
            <p>
              Primarily thin slices of mutton, as well as beef, tofu, cabbage,
              and vermicelli.
            </p>
          </div>
        </div>
      </div>

      <div class="image" id="image2">
        <img src="./img/guangdong.png" alt="Descriptive Alt Text" />
        <div class="overlay" id="overlay2">
          <div class="attribute">
            <h1>Broth</h1>
            <p>
              Mainly nourishing, with common varieties including medicinal
              broth, meat broth and seafood broth.
            </p>
            <h1>Dipping Sauce</h1>
            <p>
              Generally includes satay sauce, seafood sauce, minced garlic, and
              cilantro, with a richer flavor.
            </p>
            <h1>Ingredients</h1>
            <p>
              Primarily seafood, such as fish fillets, shrimp, and crab, along
              with various meats, vegetables, and bean products.
            </p>
          </div>
        </div>
      </div>

      <div class="image" id="image3">
        <img src="./img/jiangzhe.png" alt="Descriptive Alt Text" />
        <div class="overlay" id="overlay3">
          <div class="attribute">
            <h1>Broth</h1>
            <p>
              Common varieties including chicken broth and bone broth. There is
              also the very representative and distinctive chrysanthemum broth.
            </p>
            <h1>Dipping Sauce</h1>
            <p>
              Typically consists of soy sauce, vinegar, minced garlic, and
              cilantro, with a lighter flavor that emphasizes the original taste
              of the ingredients.
            </p>
            <h1>Ingredients</h1>
            <p>
              Primarily seafood, such as shrimp, crab, and fish fillets, as well
              as various vegetables.
            </p>
          </div>
        </div>
      </div>

      <div class="image" id="image4">
        <img src="./img/chuanyu.png" alt="Descriptive Alt Text" />
        <div class="overlay" id="overlay4">
          <div class="attribute">
            <h1>Broth</h1>
            <p>
              Mainly spicy, using a large amount of chili peppers and Sichuan
              peppercorns.
            </p>
            <h1>Dipping Sauce</h1>
            <p>
              Typically an oil-based one, including minced garlic, cilantro,
              chopped scallions, and sesame oil.
            </p>
            <h1>Ingredients</h1>
            <p>
              Besides the common tripe, yellow throat, and duck intestines,
              there are various vegetables, bean curd skins, and wide noodles.
            </p>
          </div>
        </div>
      </div>

      <div class="image" id="image5">
        <img src="./img/guizhou.png" alt="Descriptive Alt Text" />
        <div class="overlay" id="overlay5">
          <div class="attribute">
            <h1>Broth</h1>
            <p>
              Sour broth is a specialty, made with fermented ingredients like
              tomatoes and pickled vegetables, offering a tangy and appetizing
              flavor.
            </p>
            <h1>Dipping Sauce</h1>
            <p>
              Usually including chili powder, minced garlic, and cilantro, with
              a lighter taste.
            </p>
            <h1>Ingredients</h1>
            <p>
              Primarily fish fillets and beef slices, as well as various wild
              delicacies like bamboo shoots and mushrooms.
            </p>
          </div>
        </div>
      </div>

      </div>

      
    </div>
</div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // 获取所有图片和覆盖层
        var images = document.querySelectorAll(".image");
        var overlays = document.querySelectorAll(".overlay");

        images.forEach(function (image, index) {
          var img = image.querySelector("img");
          var overlay = overlays[index];

          // 为每个图片添加鼠标悬停事件
          image.addEventListener("mouseover", function () {
            images.forEach(function (otherImage, otherIndex) {
              if (otherIndex !== index) {
                otherImage.style.opacity = "0"; // 隐藏其他图片
              }
            });
            overlay.style.opacity = "1"; // 显示当前图片的覆盖层
          });

          image.addEventListener("mouseout", function () {
            images.forEach(function (otherImage) {
              otherImage.style.opacity = "1"; // 恢复所有图片的可见性
            });
            overlay.style.opacity = "0"; // 隐藏当前图片的覆盖层
          });
        });
      });
    </script>
  </body>
</html>

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Full Screen Video Player with Fixed Button</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Ultra&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="./style.css" />

    <!-- 这边是弹出层的style和js code -->

    <script src="./main.js" type="module" ></script>
    <style>
      .overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
      }

      .popup {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      }

      .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
      }
    </style>
  </head>
  <div>
    <!-- <button onclick="openPopup()">打开弹出层</button> -->

    <div id="overlay" class="overlay">
      <div id="popup" class="popup"></div>
    </div>

    <div id="loading">
      <video id="loadingVideo" muted autoplay loop style="margin-top: 0px">
        Your browser does not support the video tag.
      </video>
      <div class="loadingText">Savor the taste</div>
      <div id="progressText">0%</div>
    </div>

    <div class="starting" id="startingpage">
      <div class="header">
        <!-- <img src="logo.png" alt="Logo"> -->
        <h1>Welcome to Slow Food Online</h1>
        <div class="location">
          <img src="logo.png" alt="logo" width="30" height="35" />
          <span>Chaoyang District, Beijing, China</span>
        </div>
      </div>

      <video id="foregroundVideoContainer" autoplay muted loop>
        <!-- <source src="scene.webm" type="video/webm" /> -->
        Your browser does not support the video tag.
      </video>

      <video id="backgroundVideo" muted>
        <!-- <source src="resturant.webm" type="video/webm" /> -->
        Your browser does not support the video tag.
      </video>

      <video id="light" autoplay muted>
        <!-- <source src="opening.webm" type="video/webm" /> -->
        Your browser does not support the video tag.
      </video>

      <div id="buttonContainer">
        <button id="fixedButton">Fixed Button</button>
      </div>

      <div class="tickerContainer">
        <div class="ticker">
          <div>
            <span
              >Shop our fresh supplies and experience local food cultures with
              just one click. Shop our fresh supplies and experience local food
              cultures with just one click. Shop our fresh supplies and
              experience local food cultures with just one click.</span
            >
            <span
              >Shop our fresh supplies and experience local food cultures with
              just one click. Shop our fresh supplies and experience local food
              cultures with just one click. Shop our fresh supplies and
              experience local food cultures with just one click.</span
            >
          </div>
        </div>
      </div>
    </div>

    <div id="videoOverlay">
      <video id="introVideo" muted autoplay style="margin-top: 0px">
        <!-- <source src="next.webm" type="video/webm" /> -->
        Your browser does not support the video tag.
      </video>
    </div>

    <div class="info-container" id="info-container" style="display: none">
      <h1>Persimmons</h1>
      <p class="description">
        the sweet fruit of autumn and winter in China, are known as the
        "sunshine of fruits."
      </p>
      <div class="attributes">
        <div class="attribute">
          <h2>Look</h2>
          <p>
            vibrant orange-red color and round adorable shape<br />they are a
            delight to the eyes
          </p>
        </div>
        <div class="attribute">
          <h2>Nutrition</h2>
          <p>
            They have a unique texture—smooth, delicate sweet but not
            cloying—and are rich in nutrients including vitamin C, fiber, and
            antioxidants
          </p>
        </div>
        <div class="attribute">
          <h2>Taste</h2>
          <p>
            Each bite is a taste of autumn, bringing the joy of harvest. Crisp
            and refreshing when eaten fresh, sweet as honey when ripe persimmons
            can also be made into dried persimmons, persimmon jam, and various
            other delicacies
          </p>
        </div>
      </div>
    </div>


    <div id="three-wrapper">
    <button id="shopButton"></button>
    <button id="potButton1"></button>
    <button id="posterButton"></button>
    <button id="potButton2"></button>
    <button id="leaveButton"></button>

    <div class="three-container" id="three-container"></div>
    <!-- Hidden iframe to preload the next page -->
    <!-- <script type="module" src="./startpage.js"></script> -->
    </div>

    <script src="./video-loader.js" type="module"></script>
  </body>
</html>

================
File: javascript.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="32" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 256"><path fill="#F7DF1E" d="M0 0h256v256H0V0Z"></path><path d="m67.312 213.932l19.59-11.856c3.78 6.701 7.218 12.371 15.465 12.371c7.905 0 12.89-3.092 12.89-15.12v-81.798h24.057v82.138c0 24.917-14.606 36.259-35.916 36.259c-19.245 0-30.416-9.967-36.087-21.996m85.07-2.576l19.588-11.341c5.157 8.421 11.859 14.607 23.715 14.607c9.969 0 16.325-4.984 16.325-11.858c0-8.248-6.53-11.17-17.528-15.98l-6.013-2.58c-17.357-7.387-28.87-16.667-28.87-36.257c0-18.044 13.747-31.792 35.228-31.792c15.294 0 26.292 5.328 34.196 19.247l-18.732 12.03c-4.125-7.389-8.591-10.31-15.465-10.31c-7.046 0-11.514 4.468-11.514 10.31c0 7.217 4.468 10.14 14.778 14.608l6.014 2.577c20.45 8.765 31.963 17.7 31.963 37.804c0 21.654-17.012 33.51-39.867 33.51c-22.339 0-36.774-10.654-43.819-24.574"></path></svg>

================
File: main copy.js
================
import * as THREE from "three";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
import { EffectComposer } from "three/examples/jsm/postprocessing/EffectComposer.js";
import { RenderPass } from "three/examples/jsm/postprocessing/RenderPass.js";
import { ShaderPass } from "three/examples/jsm/postprocessing/ShaderPass.js";
import { FXAAShader } from "three/examples/jsm/shaders/FXAAShader.js";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import { UnrealBloomPass } from "three/examples/jsm/postprocessing/UnrealBloomPass.js";
import { GammaCorrectionShader } from "three/examples/jsm/shaders/GammaCorrectionShader.js";
import { showInfoDiv } from "./showInfoDiv.js"; // 导入 showInfoDiv 函数

let scene, camera, renderer, composer, model, controls, raycaster, mouse;
const objects = [];
let lastCameraPosition = new THREE.Vector3();


init();
animate();

function init() {
  const container = document.createElement("div");
  container.className = "three-container";
  document.body.appendChild(container);

  // Scene
  scene = new THREE.Scene();

  // Renderer
  renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.shadowMap.enabled = true; // 启用阴影
  renderer.shadowMap.type = THREE.PCFSoftShadowMap; // 使用柔和阴影
  renderer.toneMapping = THREE.ReinhardToneMapping; // 设置色调映射
  renderer.toneMappingExposure = 10; // 增加曝光
  renderer.outputEncoding = THREE.sRGBEncoding;
  container.appendChild(renderer.domElement);

  // Camera
  camera = new THREE.PerspectiveCamera(
    50,
    window.innerWidth / window.innerHeight,
    0.1,
    2000
  );
  camera.position.set(5.04, 1.03, -1.53);
  camera.rotation.set(0, 14.29, 0);
  lastCameraPosition.copy(camera.position);

  // Raycaster
  raycaster = new THREE.Raycaster();
  mouse = new THREE.Vector2();

  // Load GLB model
  const loader = new GLTFLoader();
  loader.load(
    "5.glb",
    function (gltf) {
      model = gltf.scene;
      model.traverse((child) => {
        if (child.isMesh) {
          console.log(child.name); // 输出模型名称到控制台
          child.castShadow = true;
          child.receiveShadow = true;
          objects.push(child); // Add mesh to objects array

          if (child.material) {
            child.material.roughness = 0.1;
            child.material.metalness = 0.1;model.traverse((child) => {
        if (child.isMesh) {
          console.log(child.name); // 输出模型名称到控制台
          child.castShadow = true;
          child.receiveShadow = true;
          objects.push(child); // Add mesh to objects array

          if (child.material) {
            child.material.roughness = 0.1;
            child.material.metalness = 0.1;
            child.material.emissiveIntensity = 0.5; // 根据需要调整
          }
        }
      });
            child.material.emissiveIntensity = 0.5; // 根据需要调整
          }
        }
      });
      // model.position.set(2, 0, 0);
    //   model.rotation.set(0, 0, THREE.MathUtils.degToRad(3.5)); // 例如，绕Y轴旋转45度

      scene.add(model);
    },
    undefined,
    function (error) {
      console.error(error);
    }
  );

  // Postprocessing
  composer = new EffectComposer(renderer);

  // Render pass
  const renderPass = new RenderPass(scene, camera);
  composer.addPass(renderPass);

  // Unreal Bloom pass
  const bloomPass = new UnrealBloomPass(
    new THREE.Vector2(window.innerWidth, window.innerHeight),
    0.2, 0.4, 0.85
  );
  bloomPass.threshold = 0;
  bloomPass.strength = 0.2;
  bloomPass.radius = 0;
  composer.addPass(bloomPass);

  // Gamma correction pass
  const gammaCorrectionPass = new ShaderPass(GammaCorrectionShader);
  composer.addPass(gammaCorrectionPass);

  // FXAA pass
  const fxaaPass = new ShaderPass(FXAAShader);
  const pixelRatio = renderer.getPixelRatio();
  fxaaPass.material.uniforms["resolution"].value.x =
    1 / (window.innerWidth * pixelRatio);
  fxaaPass.material.uniforms["resolution"].value.y =
    1 / (window.innerHeight * pixelRatio);
  composer.addPass(fxaaPass);

  // Handle window resize
  window.addEventListener("resize", onWindowResize, false);

  // Mouse click event listener
  window.addEventListener("click", onMouseClick, false);
}

function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(window.innerWidth, window.innerHeight);
  composer.setSize(window.innerWidth, window.innerHeight);
}

function onMouseClick(event) {
  // Normalize mouse coordinates to [-1, 1]
  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

  // Update the picking ray with the camera and mouse position
  raycaster.setFromCamera(mouse, camera);

  // Calculate objects intersecting the picking ray
  const intersects = raycaster.intersectObjects(objects);

  if (intersects.length > 0) {
    const intersectedObject = intersects[0].object;
    console.log(intersectedObject.name); // 输出被点击对象的名称

    // Check if the clicked object is the specific model
    if (intersectedObject.name === "zhuozil") {
      // alert("clicked");
      showInfoDiv(camera);
    }
  }
}

function updateMaterials() {
    objects.forEach((object) => {
      if (object.isMesh && object.material) {
        // 这里可以根据需要重新设置材质属性
        object.material.needsUpdate = true;
      }
    });
  }

function animate() {
  requestAnimationFrame(animate);
  if (!camera.position.equals(lastCameraPosition)) {
    updateMaterials();
    lastCameraPosition.copy(camera.position);
  }
  // camera.update();
  // Update OrbitControls

  // controls.update();

  // Render scene with composer
  composer.render();
}

================
File: main.js
================
import * as THREE from "three";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
import { DRACOLoader } from "three/examples/jsm/loaders/DRACOLoader.js";
import { EffectComposer } from "three/examples/jsm/postprocessing/EffectComposer.js";
import { RenderPass } from "three/examples/jsm/postprocessing/RenderPass.js";
import { ShaderPass } from "three/examples/jsm/postprocessing/ShaderPass.js";
import { FXAAShader } from "three/examples/jsm/shaders/FXAAShader.js";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import { UnrealBloomPass } from "three/examples/jsm/postprocessing/UnrealBloomPass.js";
import { GammaCorrectionShader } from "three/examples/jsm/shaders/GammaCorrectionShader.js";
import { gsap } from "gsap/gsap-core";
import { openPopup } from './popup.js';
import {
  PerspectiveCameraForResizableWindow,
  handleCameraRotation,
  handleMouseMovement,
} from "./CameraWithMouseRotation.js";
import CameraOrientationState from "./CameraOrientationState.js";
import { PI } from "three/examples/jsm/nodes/Nodes.js";
// main.js
// import { openPopup } from './popup.js';
// window.openPopup = openPopup;

// import { closePopup } from './popup.js';
// window.closePopup = closePopup;

let scene, camera, renderer, composer, model, controls, raycaster;
const objects = [];
let cameraOrientationState = new CameraOrientationState();
let lastCameraPosition = new THREE.Vector3();
const button = document.getElementById("fixedButton");
const backgroundVideo = document.getElementById("backgroundVideo");
const loadingDiv = document.getElementById("loading");
const startPage = document.getElementById("startingpage");
const videoOverlay = document.getElementById("videoOverlay");
const introVideo = document.getElementById("introVideo");
const threeContainer = document.getElementById("three-wrapper");
const shopButton = document.getElementById("shopButton");
const leaveButton = document.getElementById("leaveButton");

const buttons = [
  {
    element: document.getElementById("potButton2"),
    position: new THREE.Vector3(2, 0.7, 0),
  },
  {
    element: document.getElementById("potButton1"),
    position: new THREE.Vector3(-0.9, 0.9, 0),
  },
  {
    element: document.getElementById("posterButton"),
    position: new THREE.Vector3(-2, 1.3, 0),
  },
  {
    element: document.getElementById("leaveButton"),
    position: new THREE.Vector3(2.9, 1.8, 1),
  },
  {
    element: document.getElementById("shopButton"),
    position: new THREE.Vector3(0, 1.4, 0),
  },
];
const mouse = new THREE.Vector2();

shopButton.addEventListener("click", () => {
  openPopup('./overlay.html');  // 调用 openPopup 函数
});

potButton1.addEventListener("click", () => {
  openPopup('./hotpot.html');  // 调用 openPopup 函数
});

potButton2.addEventListener("click", () => {
  openPopup('./overlay.html');  // 调用 openPopup 函数
});

posterButton.addEventListener("click", () => {
  openPopup('./poster.html');  // 调用 openPopup 函数
});



window.addEventListener("load", () => {
  // Notify iframe to start loading
});

button.addEventListener("mouseover", () => {
  backgroundVideo.play();
});

button.addEventListener("mouseout", () => {
  // Do nothing, let the video play to the end
});

button.addEventListener("click", () => {
  startPage.style.display = "none";
  videoOverlay.style.display = "flex";
  introVideo.play();
  threeContainer.style.display = "flex";
});

leaveButton.addEventListener("click", () => {
  startPage.style.display = "flex";
  threeContainer.style.display = "none";
  // startPage.style.opacity = 100;
  // 使用 GSAP 让元素淡入显示
  gsap.to(startPage, { duration: 1, opacity: 1, ease: "power2.inOut" });
});

introVideo.addEventListener("ended", () => {
  videoOverlay.style.display = "none";
});

init();

function init() {
  // Scene
  scene = new THREE.Scene();

  // Renderer
  renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.shadowMap.enabled = true; // 启用阴影
  renderer.shadowMap.type = THREE.PCFSoftShadowMap; // 使用柔和阴影
  renderer.toneMapping = THREE.ReinhardToneMapping; // 设置色调映射
  renderer.toneMappingExposure = 10; // 增加曝光
  //renderer.outputEncoding = THREE.sRGBEncoding;
  threeContainer.appendChild(renderer.domElement);
  const targetLookAt2 = new THREE.Vector3(-2.3, 1, -0.7);

  // Camera
  camera = PerspectiveCameraForResizableWindow(30, 0.1, 10000, renderer);
  camera.position.set(1, 1.2, 6);
  // camera.lookAt(new THREE.Vector3(0, -1, -1));

  camera = new THREE.PerspectiveCamera(
    50,
    window.innerWidth / window.innerHeight,
    0.1,
    2000
  );
  camera.position.set(1.04, 1.03, 4.53);

  camera.lookAt(targetLookAt2);
  lastCameraPosition.copy(camera.position);

  // Raycaster
  raycaster = new THREE.Raycaster();

  // Configure and load GLTF model with DRACOLoader
  const dracoLoader = new DRACOLoader();
  dracoLoader.setDecoderPath(
    "https://www.gstatic.com/draco/versioned/decoders/1.4.1/"
  );

  const loader = new GLTFLoader();
  // loader.setDRACOLoader(dracoLoader);
  loader.load(
    "8.6.glb",
    function (gltf) {
      model = gltf.scene;
      model.traverse((child) => {
        if (child.isMesh) {
          // console.log(child.name); // 输出模型名称到控制台
          child.castShadow = true;
          child.receiveShadow = true;
          objects.push(child); // Add mesh to objects array

          if (child.material) {
            child.material.roughness = 0.1;
            child.material.metalness = 0.1;
            child.material.emissiveIntensity = 0.5; // 根据需要调整
          }
        }
      });
      scene.add(model);
      scene.rotation.y = -Math.PI / 2;
      loadingDiv.style.display = "none";
      animate();
    },
    function (xhr) {
      const progress = (xhr.loaded / xhr.total) * 100;
      progressText.textContent = Math.round(progress) + "%";
      console.log(progress + "% loaded");
    },
    undefined,
    function (error) {
      console.error(error);
    }
  );

  // Postprocessing
  composer = new EffectComposer(renderer);

  // Render pass
  const renderPass = new RenderPass(scene, camera);
  composer.addPass(renderPass);

  // Unreal Bloom pass
  const bloomPass = new UnrealBloomPass(
    new THREE.Vector2(window.innerWidth, window.innerHeight),
    0.2,
    0.4,
    0.85
  );
  bloomPass.threshold = 0;
  bloomPass.strength = 0.2;
  bloomPass.radius = 0;
  composer.addPass(bloomPass);

  // Gamma correction pass
  const gammaCorrectionPass = new ShaderPass(GammaCorrectionShader);
  composer.addPass(gammaCorrectionPass);

  // FXAA pass
  const fxaaPass = new ShaderPass(FXAAShader);
  const pixelRatio = renderer.getPixelRatio();
  fxaaPass.material.uniforms["resolution"].value.x =
    1 / (window.innerWidth * pixelRatio);
  fxaaPass.material.uniforms["resolution"].value.y =
    1 / (window.innerHeight * pixelRatio);
  composer.addPass(fxaaPass);

  // Handle window resize
  window.addEventListener("resize", onWindowResize, false);

  // Mouse move event listener
  window.addEventListener("mousemove", onMouseMove, false);

  // Mouse click event listener
  // window.addEventListener("click", onMouseClick, false);

  // Move camera on button click
  const moveButton = document.getElementById("move-button");
  // moveButton.addEventListener("click", onMoveButtonClick);
}

function updateButtonPositions() {
  buttons.forEach((button) => {
    const vector = button.position.clone().project(camera);
    let buttonPosition = {
      x: (vector.x * 0.5 + 0.5) * window.innerWidth,
      y: (-vector.y * 0.5 + 0.5) * window.innerHeight,
    };

    if (button.element.id === "leaveButton") {
      const customOffset = { x: 0, y: 0 }; // 自定义偏移值
      buttonPosition.x += customOffset.x;
      buttonPosition.y += customOffset.y;
    }

    if (button.element.id === "potButton2") {
      const customOffset = { x: 0, y: 0 }; // 自定义偏移值
      buttonPosition.x += customOffset.x;
      buttonPosition.y += customOffset.y;
    }

    button.element.style.left = `${buttonPosition.x}px`;
    button.element.style.top = `${buttonPosition.y}px`;
  });
}

function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(window.innerWidth, window.innerHeight);
  composer.setSize(window.innerWidth, window.innerHeight);
}

function onMouseMove(event) {
  // Normalize mouse coordinates to [-1, 1]
  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse.y = (event.clientY / window.innerHeight) * 2 - 1;

  handleMouseMovement(mouse.x, mouse.y, cameraOrientationState);
}
document.addEventListener("mousemove", onMouseMove, false);

function animate() {
  requestAnimationFrame(animate);
  handleCameraRotation(camera, cameraOrientationState);
  // Render scene with composer
  composer.render();
  updateButtonPositions();
}

================
File: model.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Load Multiple GLB Files Example</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }
        #canvas-container {
            width: 100%;
            height: 100vh;
        }
        #popup {
            display: none;
            position: absolute;
            top: 40%;
            left: 35%;
            height: 20%;
            width: 30%;
            padding: 10px;
            border-radius: 10px;
            background-color: rgba(233, 137, 47, 0.533);
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>
    <div id="canvas-container"></div>
    <div id="popup">This is a popup for the fruit model.</div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tween.js/18.6.4/tween.umd.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/postprocessing/EffectComposer.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/postprocessing/RenderPass.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/postprocessing/UnrealBloomPass.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/shaders/CopyShader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/postprocessing/ShaderPass.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/shaders/LuminosityHighPassShader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/shaders/GammaCorrectionShader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/shaders/ToneMapShader.js"></script>
    <script>
        // 创建场景
            // 创建场景
            const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x87CEEB);
        
        // 创建相机
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const initialCameraPosition = new THREE.Vector3(0.1, 10.58, 15);
        camera.position.copy(initialCameraPosition);

        // 调整相机的视角
        camera.fov = 50;
        camera.updateProjectionMatrix();

        // 创建渲染器
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio); // 增加分辨率
        renderer.shadowMap.enabled = true; // 启用阴影
        renderer.shadowMap.type = THREE.PCFSoftShadowMap; // 使用柔和阴影
        renderer.toneMapping = THREE.ReinhardToneMapping; // 设置色调映射
        renderer.toneMappingExposure = 10; // 增加曝光
        document.getElementById('canvas-container').appendChild(renderer.domElement);

        // 创建后处理效果
        const composer = new THREE.EffectComposer(renderer);
        const renderPass = new THREE.RenderPass(scene, camera);
        composer.addPass(renderPass);

        const bloomPass = new THREE.UnrealBloomPass(
            new THREE.Vector2(window.innerWidth, window.innerHeight),
            1.5, 0.4, 0.85
        );
        bloomPass.threshold = 0;
        bloomPass.strength = 1.5;
        bloomPass.radius = 0;
        composer.addPass(bloomPass);

        const gammaCorrectionPass = new THREE.ShaderPass(THREE.GammaCorrectionShader);
        composer.addPass(gammaCorrectionPass);

        // 创建 GLTFLoader 实例
        const loader = new THREE.GLTFLoader();

        // 用于存储所有加载的模型
        const models = [];
        // 加载多个 GLB 文件并设置不同位置
        const modelFiles = [
            { file: '5.glb', position: { x: 0, y: 0, z: 0 } },
           
        ];

        modelFiles.forEach((modelInfo, index) => {
            loader.load(
                modelInfo.file,
                function (gltf) {
                    const model = gltf.scene;
                    model.position.set(modelInfo.position.x, modelInfo.position.y, modelInfo.position.z);
                    model.scale.set(1, 1, 1); // 根据需要调整模型缩放
                    
                    // 设置 userData
                    model.traverse((child) => {
                        if (child.isMesh) {
                            child.castShadow = true;
                            child.receiveShadow = true;
                            child.userData.fileName = modelInfo.file;
                            // 调整材质
                            if (child.material) {
                                child.material.roughness = 0.1;
                                child.material.metalness = 0.1;
                            }
                        }
                    });

                    scene.add(model);
                    models.push(model);

                    // 在这里调整摄像头和目标位置

                },
                function (xhr) {
                    console.log((xhr.loaded / xhr.total) * 100 + '% loaded');
                },
                function (error) {
                    console.error('Error loading GLB file:', error);
                }
            );
        });

        // 创建 OrbitControls 实例
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true; // 启用阻尼效果（惯性）
        controls.dampingFactor = 0.25;
        controls.screenSpacePanning = false;
        controls.minDistance = 1;
        controls.maxDistance = 10;
        controls.maxPolarAngle = Math.PI / 2;
        // 动画循环
        let lastLogTime = 0;
        function animate(time) {
            requestAnimationFrame(animate);
            controls.update(); // 仅当启用阻尼或自动旋转时需要
            TWEEN.update();
            renderer.render(scene, camera);

            // 每秒记录一次摄像机的位置和方向
            if (time - lastLogTime > 1000) {
                console.log(`Camera position: (${camera.position.x.toFixed(2)}, ${camera.position.y.toFixed(2)}, ${camera.position.z.toFixed(2)})`);
                console.log(`Camera target: (${controls.target.x.toFixed(2)}, ${controls.target.y.toFixed(2)}, ${controls.target.z.toFixed(2)})`);
                lastLogTime = time;
            }
        }
        animate();

        // 响应窗口大小变化
        window.addEventListener('resize', onWindowResize, false);

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // Raycaster 用于检测点击的对象
        const raycaster = new THREE.Raycaster();
        const mouse = new THREE.Vector2();

        function onMouseClick(event) {
            const popup = document.getElementById('popup');
            if (!popup.contains(event.target)) {
                hidePopup();
                moveCameraToInitialPosition();
            }

            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

            raycaster.setFromCamera(mouse, camera);

            const intersects = raycaster.intersectObjects(models, true);

            if (intersects.length > 0) {
                const selectedObject = intersects[0].object;
                console.log('Selected object:', selectedObject.userData.fileName); // 调试信息

                // 检查是否点击的是fruit.glb模型
                if (selectedObject.userData.fileName === 'fruit.glb') {
                    moveCameraToObject(selectedObject, showPopup);
                }
            } else {
                console.log('No intersection detected'); // 调试信息
            }
        }

        function moveCameraToObject(object, callback) {
            const targetPosition = new THREE.Vector3();
            object.getWorldPosition(targetPosition);

            const offset = new THREE.Vector3(0.037, 1, 0.5); // 偏移量，可以根据需要调整
            const newPosition = targetPosition.clone().add(offset);

            // 创建 TWEEN 动画
            new TWEEN.Tween(camera.position)
                .to({ x: newPosition.x, y: newPosition.y, z: newPosition.z }, 2000) // 2秒的动画时间
                .easing(TWEEN.Easing.Quadratic.InOut)
                .onComplete(callback)
                .start();

            // 更新 OrbitControls 的目标位置
            new TWEEN.Tween(controls.target)
                .to({ x: targetPosition.x, y: targetPosition.y, z: targetPosition.z }, 2000)
                .easing(TWEEN.Easing.Quadratic.InOut)
                .onUpdate(() => controls.update())
                .start();
        }

        function showPopup() {
            const popup = document.getElementById('popup');
            popup.style.display = 'block';
        }

        function hidePopup() {
            const popup = document.getElementById('popup');
            popup.style.display = 'none';
        }

        window.addEventListener('click', onMouseClick, false);
    </script>
</body>
</html>

================
File: overlay.html
================
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
     @import url('https://fonts.googleapis.com/css2?family=Ultra&display=swap');

        @import url('https://fonts.googleapis.com/css2?family=Ultra&family=Roboto+Mono&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Edu+AU+VIC+WA+NT+Hand:wght@400..700&family=Ultra&display=swap');

        body {
        
        background-color: #000000bc;
      }

/* 全局滚动条宽度 */
::-webkit-scrollbar-thumb {
  border-radius: 7px;
  border: 1px solid #413F39;
}
::-webkit-scrollbar {
  
  width: 15px; /* 垂直滚动条的宽度 */
  height: 12px; /* 水平滚动条的高度 */
}
    
        .page2-main0left {
      background-color: none;
    }

    .header-text {
      left: 13px;
      top: 10px;
      width: 100%;
      height: 42px;
      opacity: 1;
      border-radius: 7px;

      border: 1.7px solid rgba(65, 63, 57, 1);
      text-align: center;
      line-height: 42px;

    }

    .page2-main {
      left: 14px;
      top: 63px;
      width: 100%;
      opacity: 1;
      background-color: rgba(182, 230, 122, .8);


    }

    .page2-main-left {
      width: 260px;
      position: relative;
    }

    .page2-main-right {
      flex: 1;
      background-image: url(./img/right.png);
      height: 100%;
      overflow-y: auto;
      width: 450px;
    }

    .page2-sider-right {
      left: 899px;
      top: 63px;
      width: 27px;
      height: 132px;
      opacity: 1;
      border-radius: 7px;

      border: 1.7px solid rgba(65, 63, 57, 1);
      margin-left: 10px;

    }

    .page2-main-box {
      flex: 1;
    
    }



    .page2-main-top {
      border-radius: 7px;

      border: 1.7px solid rgba(204, 195, 166, 1);
    }

    

    .page3-info-1 {
      left: 364px;
      top: 89px;
      height: 42px;
      opacity: 1;
      line-height: 42px;
      background: linear-gradient(90deg, rgb(255, 255, 255), rgba(255, 255, 255, 0) );
      padding: 0 20px;
    }


    .page2-info-1 {
      left: 364px;
      top: 89px;
      width: 450px;
      height: 42px;
      opacity: 1;
      line-height: 42px;
      background: linear-gradient(90deg, rgb(255, 255, 255), rgba(255, 255, 255, 0) );
      padding: 0 10px;
    }

    .page2-info-3 {
      left: 364px;
      top: 89px;
      width: 600px;
      height: 42px;
      opacity: 1;
      line-height: 42px;
      background: linear-gradient(90deg, rgb(255, 255, 255), rgba(255, 255, 255, 0) );
      padding: 0 10px;
    }

    .page2-info-2 {
      left: 869px;
      top: 142px;
      width: 450px;
      height: 42px;
      opacity: 1;
      line-height: 42px;
      background: linear-gradient(90deg, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%);
      padding: 0 10px;
    }

    .page2-main-left-price {
      color: black;
      position: absolute;
      background-color: rgba(255, 255, 255, .8);
      padding: 0 8px;
      border-radius: 5px;
      bottom: 17px;
    }
.page3-main-left-price{
  color: black;
  background-color: rgba(182, 230, 122, .8);
      border-radius: 5px;
      width: 85px !important;
}
    .page2-btn {
  
      position: relative;
      transform: translateX(-50%);
      left: 7;
      top: 300px;
    }

    .page3-btn {
  
  position: relative;
  transform: translateX(-50%);
 
  left: 360;
  top: 100px;
  bottom: 70px;
}

    .page2-wrapper {}

    .page2-main-top-dec {
      opacity: 1;
      font-size: 16px;
      font-weight: 400;
      letter-spacing: 0px;
      line-height: 22.23px;
      color: rgba(52, 91, 3, 1);
      padding: 15px 23px;
      

    }

    .price-btn-left,
    .price-btn-right {
      position: relative;
      border: 2px solid black;
      background-color: rgb(141 185 87);
      border-radius: 5px;
      padding: 3px 5px;

      left: 45px;
      top: 165px;
    }

    .box-icon {
      position: absolute;
      top: 0;
      width: 50px;
      left: 5px;
      top: -10px
      
      
    }

    .box-icon-box {
      position: relative;
      padding-left: 60px;
      left: 0;
      top: 0;
      
      
    }

    .main-bg {
      background-image: url(./img/right.png);
      height: 100%;
      overflow-y: auto;
    }

    .grid-cols-4 {
      background-image: url(./img/right.png);
      padding-left: 0px;
    }

    body {
      position: relative;
    }

    #page1,
    #page2,
    #page3 {
      font-family: "Edu AU VIC WA NT Hand", cursive;
      /* font-family: 'Roboto Mono', monospace; */
      position: fixed;
    }
    .show{
      background-color: rgb(138, 255, 96);
    }
    .showNode{
      z-index: 999;
    }
   
    .page3-main-top-dec{
      /* font-family: "Edu AU VIC WA NT Hand", cursive; */
      opacity: 1;
      font-size: 16px;
      font-weight: 400;
      letter-spacing: 0px;
      line-height: 22.23px;
      color: rgba(52, 91, 3, 1);
      padding: 15px 23px;
    }
    /* .page3_marleft{
      width: 76vw;
      background-color: rgba(182, 230, 122, .8) !important;

    } */

    .custom-width {
    width: 100px; /* 或者任何您希望的宽度值 */
}
.ml-custom {
    margin-left: 20px; /* 您可以根据需要设置任何值 */
}
  </style>
</head>

<body>
  <div id="page1" class="p-4 bg-[none] min-h-screen flex items-center justify-center ">
    <div class="bg-[#fdf5f0] p-10 m-16 mx-40 rounded-lg shadow-lg w-full overflow-y-auto" style="height: 80vh;background-color: rgba(253, 245, 240, 0.8);">
      <div class="flex justify-between items-center mb-10">
        <h2 class="text-lg border rounded-md border-gray-900 text-sm font-medium custom-width text-left py-0.5 ml-0 padding-left: 20px ">Shop Recipes</h2>
        <div class="w-6 h-6 border rounded-full flex items-center justify-center">
          <div class="w-2 h-4 bg-[#fdf5f0] border rounded-full"></div>
        </div>
      </div>
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-8 overflow-y-auto">
        <div id="showPage2" class="   flex flex-col items-center">
          <img class="border rounded-lg border-gray-900 mb-2" src="./img/p1-1.png" alt="Tea-scented Ribs">
          <div class="border rounded-md border-gray-900 text-sm font-medium w-full text-center py-0.5">Tea-scented Ribs
          </div>
        </div>
        <div id="showPage3" class="  flex flex-col items-center">
          <img src="./img/p1-2.png" alt="Zongzi" class="border rounded-md border-gray-900 mb-2">
          <div class="border rounded-md border-gray-900 text-sm font-medium w-full text-center py-0.5">Zongzi
          </div>
        </div>
        <div id="showPage4" class="  flex flex-col items-center">
          <img src="./img/p1-3.png" alt="Coming Soon" class="border rounded-md border-gray-900 mb-2">
          <div class="border rounded-md border-gray-900 text-sm font-medium w-full text-center py-0.5">Coming Soon
          </div>
        </div>
        <div id="showPage5" class="  flex flex-col items-center">
          <img src="./img/p1-3.png" alt="Coming Soon" class="border rounded-md border-gray-900 mb-2">
          <div class="border rounded-md border-gray-900 text-sm font-medium w-full text-center py-0.5">Coming Soon
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="page2" class="hidden p-4  min-h-screen flex items-center justify-center ">
    <div class="  m-16 mx-40 rounded-lg shadow-lg w-full overflow-y-auto page2-wrapper" style="height: 80vh;">

      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 overflow-y-auto h-full page2-main">
        <div class="md:col-span-2 w-full h-full bg-zinc-200 p-2 main-bg">
          <div class=" header-text">Tea-Scented Ribs</div>

          <div class="flex mt-2">
            <div class="page2-main-box">
              <div class="page2-main-top">
                <div class="flex items-center mb-4 ">
                  <div class="page2-main-left">
                    <img src="./img/主图.png" alt="Tea-Scented Ribs" class=" rounded-lg">
                    <div class="ml-4 page2-main-left-price">
                      <p class=" text-xl">$
                        <span id="price">13.99</span>
                      </p>
                    </div>
                  </div>
                  <div class="page2-main-right bg-zinc-200 dark:bg-zinc-700 p-2 rounded-lg mb-2">
                    <div class="flex justify-between page2-info-1">
                      <span>Prep. Time</span>
                      <span>10mins</span>
                    </div>
                    <div class="flex justify-between page2-info-2">
                      <span>Cooking Time</span>
                      <span>30mins</span>
                    </div>
                    <div class="flex justify-between page2-info-1">
                      <span>Difficulty Level</span>
                      <div>
                        <!-- <span>🌟🌟🌟</span> -->
                        <img class="h-full" src="./img/图标2.png" />
                      </div>
                    </div>
                    <div class="flex justify-between page2-info-2">
                      <span>Utensils</span>
                      <span>Wok</span>
                    </div>
                  </div>

                </div>
                <div class="page2-main-top-dec">Tea-Scented Ribs, also known as "茶香排骨" (Cháxiāng Páigǔ), is a
                  traditional Chinese dish that originates from the culinary traditions of Southern China. This dish
                  combines the rich heritage of Chinese tea culture with the art of cooking savory meat dishes.</div>
              </div>

              <div class="test">
                <div class=" page2-info-3 box-icon-box pl-50px">
                  100% organic ingredients & well printed special recipe
                  <img src="./img/图标1.png" class="box-icon" />
                </div>
                <div class="grid grid-cols-4 gap-5 p-2">
                  <div class="    flex flex-col items-center">
                    <div class="bg-white rounded p-2">
                      <img src="./img/1.png" alt="Printed Recipe" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Printed Recipe*1</span>
                  </div>
                  <div class="    flex flex-col items-center">
                    <div class="bg-white rounded p-2">
                      <img src="./img/2.png" alt="Pork Ribs*500g" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Pork Ribs*500g</span>
                  </div>
                  <div class="    flex flex-col items-center">
                    <div class="bg-white rounded p-2">
                      <img src="./img/3.png" alt="Dry Green Tea*50g" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Dry Green Tea*50g</span>
                  </div>
                  <div class="    flex flex-col items-center">
                    <div class="bg-white rounded p-2">
                      <img src="./img/4.png" alt="Tea scented oil*20g" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Tea scented oil*20g</span>
                  </div>
                  <div class="   flex flex-col items-center">
                    <div class="price-btn-left" id="price-btn-left">+ $ 0.99</div>
                    <div class="bg-white rounded p-2">
                      <img src="./img/5.png" alt="Garlic+Ginger*60g" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Garlic+Ginger*60g</span>
                  </div>
                  <div class="    flex flex-col items-center">
                    <div class="price-btn-right" id="price-btn-right">+ $ 0.99</div>
                    <div class="bg-white rounded p-2">
                      <img src="./img/6.png" alt="Oyster sauce*30g" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Oyster sauce*30g</span> 
                  </div>
                 
                  <div class="page2-btn add to cart"><img src="./img/atc.png" alt="Printed Recipe" class="w-full "></div>
                 
                </div>
              </div>

            </div>
           
          </div>

        </div>
        <div class="md:col-span-1"></div>
      </div>
    </div>
  </div>

  <div id="page3" class="hidden p-4  min-h-screen flex items-center justify-center ">
    <div class="  m-16 mx-40 rounded-lg shadow-lg w-full overflow-y-auto page3-wrapper" style="height: 80vh;">

      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 overflow-y-auto h-full page2-main page3_marleft">
        <div class="md:col-span-2 w-full h-full bg-zinc-200 p-2 main-bg bg-yel">
          <div class=" header-text">Zongzi</div>

          <div class="flex mt-2">
            <div class="page3-main-box">
              <div class="page2-main-top">
                <div class="flex items-center mb-4 ">
                  <div class="page3-main-left pl-5">
                    <img src="zongzi2.png" alt="Zongzi" class=" rounded-lg">
                    <div class="ml-4 pl-2 page3-main-left-price">
                      <p class=" text-xl">$
                        <span id="price3">13.99</span>
                      </p>
                    </div>
                  </div>
                  <div class="page2-main-right bg-zinc-200 dark:bg-zinc-700 pl-2 pr-2 rounded-lg mb-4 w-7 ">
                    <div class="flex justify-between page2-info-1">
                      <span>Prep. Time</span>
                      <span>30mins</span>
                    </div>
                    <div class="flex justify-between page2-info-2">
                      <span>Cooking Time</span>
                      <span>2hrs</span>
                    </div>
                    <div class="flex justify-between page2-info-1">
                      <span>Difficulty Level</span>
                      <div>
                        <!-- <span>🌟🌟🌟</span> -->
                        <img class="h-full" src="./img/图标2.png" />
                      </div>
                    </div>
                    <div class="flex justify-between page2-info-2">
                      <span>Utensils</span>
                      <span>Pot</span>
                    </div>
                  </div>

                </div>
                <div class="page3-main-top-dec">
                  Zongzi is a traditional Chinese food made of glutinous rice stuffed with various fillings and wrapped in bamboo or reed leaves. 
                  It is typically associated with the Dragon Boat Festival, celebrated in China and some other Asian countries. 
                  The fillings can include meat, beans, or sweet ingredients like red bean paste, depending on regional preferences. 
                  Zongzi is enjoyed both for its taste and its cultural significance.</div>
              </div>

              <div class="test">
                <div class=" page3-info-1 box-icon-box pl-50px ">
                  100% organic ingredients & well printed special recipe
                  <img src="./img/图标1.png" class="box-icon" />
                </div>
                <div class="grid grid-cols-4 gap-5 p-2">
                  <div class="   flex flex-col items-center">
                    <div class="bg-white rounded p-2">
                      <img src="./img/1.png" alt="Printed Recipe" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Printed Recipe*1</span>
                  </div>
                  <div class="    flex flex-col items-center">
                    <div class="bg-white rounded p-2">
                      <img src="./img/glutinous rice.png" alt="glutinous rice" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Glutinous rice*400g</span>
                  </div>
                  <div class="    flex flex-col items-center">
                    <div class="bg-white rounded p-2">
                      <img src="./img/reed leaves.png" alt="Printed Recipe" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Reed leaves*400g</span>
                  </div>
                  <div class="    flex flex-col items-center">
                    <div class="bg-white rounded p-2">
                      <img src="./img/syrup.png" alt="Printed Recipe" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Syrup red beans*200g</span>
                  </div>
                  <!-- <div class=" dark:bg-zinc-600   flex flex-col items-center">
                    <div class="price-btn-left" id="price-btn-left3">+ $ 0.99</div>
                    <div class="bg-white rounded p-2">
                      <img src="./img/1.png" alt="Printed Recipe" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Printed Recipe*1</span>
                  </div>
                  <div class=" dark:bg-zinc-600   flex flex-col items-center">
                    <div class="price-btn-right" id="price-btn-right3">+ $ 0.19</div>
                    <div class="bg-white rounded p-2">
                      <img src="./img/1.png" alt="Printed Recipe" class="w-full ">
                    </div>
                    <span class="text-xs py-2">Printed Recipe*1</span> 
                  </div> -->
                 
                  <div class="page3-btn add to cart "><img src="./img/atc.png" alt="Printed Recipe" class="w-full "></div>
                 
                </div>
              </div>

            </div>
           
          </div>

        </div>
        <div class="md:col-span-1 "></div>
      </div>
    </div>
  </div>

  


  <script>
    // 获取 page1 和 page2 的元素
    const page1 = document.getElementById('page1');
    const page2 = document.getElementById('page2');
    const page3 = document.getElementById('page3');
    const showPage2Button = document.getElementById('showPage2');
    const showPage3Button = document.getElementById('showPage3');
    const showPage4Button = document.getElementById('showPage4');
    const showPage5Button = document.getElementById('showPage5');
    


// 监听页面2和页面3的点击事件
page2.addEventListener('click', function(event) {
  // 如果点击事件是页面内容本身，则不处理
  if (event.target === this) {
    // 隐藏 page2
    this.classList.add('hidden');
    // 显示 page1
    page1.classList.remove('hidden');
  }
});
page3.addEventListener('click', function(event) {
  // 如果点击事件是页面内容本身，则不处理
  if (event.target === this) {
    // 隐藏 page3
    this.classList.add('hidden');
    // 显示 page1
    page1.classList.remove('hidden');
  }
});
    // 监听 showPage2Button 的点击事件
    showPage2Button.addEventListener('click', () => {
      // 显示 page2
      page2.classList.remove('hidden');
      // 添加 z-index 确保 page2 浮动在 page1 之上
      // page2.classList.add('z-20');
      // page1.classList.add('z-10');
    });

    showPage3Button.addEventListener('click', () => {
      // 显示 page2
      page3.classList.remove('hidden');
      page3.classList.add('showNode');
      // 添加 z-index 确保 page2 浮动在 page1 之上
      // page3.classList.add('z-20');
      // page1.classList.add('z-10');
    });


    // showPage4Button.addEventListener('click', () => {
    //   // 显示 page2
    //   page2.classList.remove('hidden');
    //   // 添加 z-index 确保 page2 浮动在 page1 之上
    //   page2.classList.add('z-20');
    //   page1.classList.add('z-10');
    // });


    // showPage5Button.addEventListener('click', (e) => {
    //   e.stopPropagation()
    //   // 显示 page2
    //   page2.classList.remove('hidden');
    //   // 添加 z-index 确保 page2 浮动在 page1 之上
    //   page2.classList.add('z-20');
    //   page1.classList.add('z-10');
    // });

    const priceElement = document.getElementById('price');
    const priceButtonLeft = document.getElementById('price-btn-left');
    var i=0;
    // 给按钮添加点击事件监听器
    priceButtonLeft.addEventListener('click', () => {
      // 获取当前价格
      let currentPrice = parseFloat(priceElement.textContent);
      if(i%2==0){
          // 增加 0.99
          currentPrice += 0.99;
          priceButtonLeft.classList.add('show')

      }else{
          // 减去 0.99
          currentPrice -= 0.99;
          priceButtonLeft.classList.remove('show')
      }
     i++;
      // 更新价格显示
      priceElement.textContent = currentPrice.toFixed(2);
    });
    const priceButtonRight = document.getElementById('price-btn-right');
    var j=0
    // 给按钮添加点击事件监听器
    priceButtonRight.addEventListener('click', () => {
      // 获取当前价格
      let currentPrice = parseFloat(priceElement.textContent);
      if(j%2==0){
          // 增加 0.99
          currentPrice += 0.99;
          priceButtonRight.classList.add('show')
      }else{
          // 减去 0.99
          currentPrice -= 0.99;
          priceButtonRight.classList.remove('show')
      }
     j++;
      // 更新价格显示
      priceElement.textContent = currentPrice.toFixed(2);
    });

    const mainBg = document.querySelector('.main-bg');


    
  </script>
</body>

</html>

================
File: package.json
================
{
  "name": "final",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "vite": "^5.3.1"
  },
  "dependencies": {
    "gsap": "^3.12.5",
    "three": "^0.166.1"
  }
}

================
File: popup.js
================
let overlayIframe = null;
let closeButton = null;


export function openPopup(htmlFilePath) {
    // if (overlayIframe) {
    //     overlayIframe.style.display = 'block';
    //     overlayIframe.src = htmlFilePath; // Update the iframe source
    //     return;
    // }

    // Create iframe
    overlayIframe = document.createElement('iframe');
    overlayIframe.style.position = 'fixed';
    overlayIframe.style.top = '0';
    overlayIframe.style.left = '0';
    overlayIframe.style.width = '100%';
    overlayIframe.style.height = '100%';
    overlayIframe.style.border = 'none';
    overlayIframe.style.zIndex = '2000';
    overlayIframe.src = htmlFilePath;

    // Create close button
    closeButton = document.createElement('button');
    closeButton.id = 'closeButton';
    closeButton.innerHTML = 'Close';
    closeButton.style.position = 'fixed';
    closeButton.style.top = '10px';
    closeButton.style.right = '10px';
    closeButton.style.zIndex = '2001'; // Ensure it appears above the iframe
    closeButton.onclick = closePopup;

    document.body.appendChild(overlayIframe);
    document.body.appendChild(closeButton);

    overlayIframe.onload = function() {
        setupCommunication();
    };
}

function closePopup() {
    
    // startPage.style.opacity = 0.5;


    if (overlayIframe) {
        overlayIframe.style.display = 'none';
    }
    if (closeButton) {
        closeButton.style.display = 'none';
    }
}

================
File: poster.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Wonton</title>
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Ultra&display=swap");

      @import url("https://fonts.googleapis.com/css2?family=Ultra&family=Roboto+Mono&display=swap");

      body {
        font-family: "Arial", sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        background-color: #000000bc;
      }
      .container {
        /* background-color: #fff; */
        background: url(./img/daoyu.png) lightgray 50% / cover no-repeat;
        border-radius: 7px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        /* width: 700px; */
        width: 626.5px;
        height: 815.5px;
        padding: 20px;
        position: relative;
        text-align: right;
        /* stroke: 1px; */
        transform: scale(0.8);
      }
      .container h1 {
        position: relative;
        top: 30px;
        left: 40px;
        text-align: center;
        font-family: "Ultra", serif;
        font-size: 36px;
        color: #333;
        margin: 0;
        width: 545.5px;
        height: 97px;
        flex-shrink: 0;
      }
      .container .description {
        font-size: 16px;
        color: #666;
        margin: 10px 0;
      }
      .persimmon-images {
        display: flex;
        justify-content: center;
        margin: 20px 0;
        position: relative;
      }
      .persimmon-images img {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        margin: 0 10px;
      }
      .circle {
        width: 300px;
        height: 300px;
        background-color: #ffa500;
        border-radius: 50%;
        position: absolute;
        top: 50px;
        left: 50%;
        transform: translateX(-50%);
        z-index: -1;
      }
      .attributes {
        margin: 20px 0;
      }
      .attribute1 {
        position: relative;
        top: 200px;
        left: 10px;

        color: #413f39;

        text-align: center;
        font-family: "Roboto Mono", monospace;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        line-height: 131%;
      }

      .attribute2 {
        position: relative;
        top: 400px;
        left: 20px;

        color: #413f39;

        text-align: center;
        font-family: "Roboto Mono", monospace;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        line-height: 131%;
      }

      .description {
        color: #413f39;

        position: relative;
        top: 110px;
        left: 420px;

        width: 178px;
        height: 151px;

        text-align: left;
        font-family: "Roboto Mono", monospace;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        line-height: 131%;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>How did delicious flavors become lost?</h1>
      <p class="description">
        The loss of delicious flavors can ultimately be attributed to the
        disappearance of key ingredients."
      </p>
      <div class="persimmon-images">
        <!-- <img src="shizi.png" alt="Persimmon 1"> -->
        <!-- <img src="https://upload.wikimedia.org/wikipedia/commons/1/1c/Diospyros_kaki_19zz.jpg" alt="Persimmon 2"> -->
      </div>
      <!-- <div class="circle"></div> -->
      <div class="attributes">
        <!-- <div class="attribute">
                <h2>Look</h2>
                <p>vibrant orange-red color and round adorable shape<br>they are a delight to the eyes</p>
            </div> -->
        <div class="attribute1">
          <!-- <h2>Nutrition</h2> -->
          <p>
            Dao Fish Wontons are a famous snack from Jiangyin City in Jiangsu
            Province. They are known for their fresh flavor, resilience to long
            cooking, and translucent, glossy appearance.The filling is made with
            fresh, plump female knife fish caught in early spring, along with
            ingredients like chives.
          </p>
        </div>
        <div class="attribute2">
          <!-- <h2>Taste</h2> -->
          <p>However, Dao fish are now on the brink of extinction.</p>
        </div>
      </div>
    </div>
  </body>
</html>

================
File: showInfoDiv.js
================
import * as THREE from "three";
import { gsap } from "gsap";

export function showInfoDiv(camera) {
  // 调整摄像头的角度
  const duration = 500; // 调整动画持续时间（毫秒）
  const start = Date.now();
  const initialPosition = camera.position.clone();
  const targetPosition = new THREE.Vector3(0.04, 1.03, -1.53); 
  const targetLookAt1 = new THREE.Vector3(0, 1, 0); // 目标模型的位置
  const targetLookAt2 = new THREE.Vector3(-2.3, 1, -0.7); // 目标模型的位置

  const animateCamera = () => {
    const elapsed = Date.now() - start;
    const t = Math.min(elapsed / duration, 1);
    camera.position.lerpVectors(initialPosition, targetPosition, t);
    camera.lookAt(targetLookAt1); // 确保相机始终面向目标位置

    if (t < 1) {
      requestAnimationFrame(animateCamera);
    } else {
      // 摄像头到达指定位置后延迟显示弹窗
      setTimeout(() => {
        const infoDiv = document.getElementById("info-container");
        gsap.to(infoDiv, { duration: 0.5, opacity: 1, display: 'flex' });

        // 添加全局点击事件监听器
        const handleClickOutside = (event) => {
          if (!infoDiv.contains(event.target)) {
            gsap.to(infoDiv, {
              duration: 0.5, opacity: 0, onComplete: () => {
                infoDiv.style.display = "none";
                // 回到初始位置
                animateCameraBack();
              }
            });
            document.removeEventListener('click', handleClickOutside);
          }
        };
        document.addEventListener('click', handleClickOutside);
      }, 250); // 延迟250毫秒
    }
  };
  animateCamera();

  const animateCameraBack = () => {
    const backStart = Date.now();
    const currentCameraPosition = camera.position.clone();
    const animateBack = () => {
      const elapsed = Date.now() - backStart;
      const t = Math.min(elapsed / duration, 1);
      camera.position.lerpVectors(currentCameraPosition, initialPosition, t);
      camera.lookAt(targetLookAt2); // 可以根据需要调整相机的lookAt

      if (t < 1) {
        requestAnimationFrame(animateBack);
      }
    };
    animateBack();
  };
}

================
File: style.css
================
body {
  margin: 0;
  background-color: #ffedd9;
  width:100vw;
  height:100vh;
  overflow: hidden;
}
canvas {
  display: block;
}

.starting {
  /* display:none; */
  width: 100%;
  height: 100%;
  margin: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  z-index: 8;
}
video {
  margin-top:30px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: auto;
  max-height: 100%;
  object-fit: cover;
}
#buttonContainer {
  position: absolute;
  top: 15%;
  left: 10%;
  width: 45vw;
  height: 55vh;
  transform: translateY(7.5vw);
  pointer-events: none; /* Disable pointer events for the container */
  display: flex;
  justify-content: center;
  align-items: center;
}

#fixedButton {
  pointer-events: all; /* Enable pointer events for the button */
  position: absolute;
  background-color: rgba(255, 0, 0, 0);
  border: none;
  width: 100%;
  height: 100%;
  color: white;
  padding: 10px;
  cursor: pointer;
}
#loading {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #ffedd9;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 2rem;
  z-index: 10;
}
#loadingVideo{
  width: 100%;
  height: 100%;
}

.three-container {
  display: flex;
  position: relative;
  top: 0;
  left: 0;
  z-index: -1;
  
}

.controls {
  position: absolute;
  top: 0px;
  left: 0px;
  background: rgba(255, 255, 255, 0.8);
  padding: 10px;
  border-radius: 5px;
  z-index: 3;
}

#progressText {
  position: absolute;
  bottom: 20px;
  right: 30px;
  font-family: "ultra", sans-serif;
  color: #fff;
  text-shadow: -8px 5px 0px #f09b42;
  font-size: 3rem;
  font-style: normal;
  font-weight: 400;
  line-height: 110.412%; /* 141.294px */
}

.loadingText {
  position: absolute;
  bottom: 20px;
  left: 30px;
  font-family: "ultra", sans-serif;
  color: #fff;
  text-shadow: -8px 5px 0px #f09b42;
  font-size: 3rem;
  font-style: normal;
  font-weight: 400;
  line-height: 110.412%; /* 141.294px */
}

.camera-info {
  margin-top: 10px;
}
button {
  
  margin-bottom: 5px;
  height:70px;
  width:100px;
}

.info-container {
  /* background-color: #fff; */
  position: absolute;
  left: 20%;
  background: transparent no-repeat;
  background-size: contain;
  background-position: right center;
  background-image: url('/bg.jpg');
  border-radius: 7px;
  /* box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); */
  filter: drop-shadow(10px 10px 5px rgba(0, 0, 0, 0.1));
  overflow: hidden;
  width: 700px;
  height: auto;
  padding: 20px;
  margin-top: 100px;
  position: relative;
  text-align: right;
  z-index: 2;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  /* stroke: 1px; */
}
.container h1 {
  font-family: "Ultra", serif;
  font-size: 36px;
  color: #333;
  margin: 0;
}
.persimmon-images {
  display: flex;
  justify-content: center;
  margin: 20px 0;
  position: relative;
}
.persimmon-images img {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  margin: 0 10px;
}

.attributes {
  width: 80%;
}
.attribute {
  text-align: right;
  margin-bottom: 10px;
}
.attribute h2 {
  font-family: "Ultra", serif;
  font-size: 20px;
  color: #333;
  margin-bottom: 10px;
  display: inline-block;
  background-color: #ffa500;
  padding: 5px 10px;
  border-radius: 5px;
}
.attribute p {
  color: #413f39;
  text-align: right;
  font-family: "Roboto Mono", monospace;
  font-size: 12px;
  font-style: normal;
  font-weight: 400;
  line-height: 131%;
  /* font-size: 14px;
          color: #666; */
}

.description {
  color: #413f39;
  text-align: right;
  font-family: "Roboto Mono", monospace;
  font-size: 14px;
  font-style: normal;
  font-weight: 400;
  line-height: 131%;
  width: 80%;
}
.input {
  margin: 20px;
}

.input label {
  margin-right: 10px;
}

.input input {
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.output {
  margin: 20px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  background-color: #f9f9f9;
}

.suibian {
  border-radius: 20px;
  width: 30px;
  height: 100px;
  background-color: #ff636358;
  border: 10px solid;
  border-color: #dbb3b3;
}

#videoOverlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  background-color: transparent;
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 19;
}

#introVideo{
  /* position: absolute;
  top: 0;
  left: 0;
  width: auto; */
  height: 100vh;
}


.tickerContainer {
  position: fixed;
  bottom: 0;
  z-index: 9;
}
.ticker {
  /* height: 20px;
  width: 100vw; */
  width: 4430px;
  height: 50px;
  min-width: 1300px;
  background: linear-gradient(180deg, rgba(251, 239, 233, 0.00) 0%, #ECC094 100%);
  color: rgb(255, 255, 255);

  text-shadow: -3px 3px 0px #F09B42;

  font-family: 'Ultra', serif;

  font-size: 30px;

  text-align: center;
  overflow: hidden;
  white-space: nowrap;
  position: relative;
}

.ticker div {
  display: inline-block;
  width: 200%;
  height: 50px;
  position: absolute;
  overflow: hidden;
  animation: ticker 10s linear infinite;
}
.ticker span {
  float: left;
  width: 50%;
 
}
@keyframes ticker {
  0% { left: 0; }
  100% { left: -100%; }
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0px 10px;
  background-color: #ffffff; /* Light blue background */
  position: absolute;
  z-index: 3;
  width: 100vw;
  top:0;
  font-family: "Ultra", serif;
}
.header h1 {
  /* font-family: "Ultra", serif; */
  margin-left: 10px;
  font-size: 17px;
  color: #1e90ff; /* Dodger blue text */
}
.header .location {
  font-size: 17px;
  color: #1e90ff; /* Dodger blue text */
  display: flex;
  align-items: center;
  margin-right: 10px;

}
.header .location img {
  margin-right: 0px;
}


#shopButton{
  background-image: url('/shop.gif');
  background-size: contain;
  background-color: transparent;
  background-repeat: no-repeat;
  background-position: center;
  position: absolute;
  z-index: 1;
  border: none;
  right:0px;
}

#shopButton:hover{
  background-image: url('/shop.png');
  
  background-size: contain;
 
  background-repeat: no-repeat;
}

#potButton1{
  background-image: url('/go.gif');
  background-size: contain;
  background-color: transparent;
  background-repeat: no-repeat;
  position: absolute;
  z-index: 1;
  border: none;
}

#potButton1:hover{
  background-image: url('/go.png');
}

#posterButton{
  background-image: url('/go.gif');
  background-size: contain;
  background-color: transparent;
  background-repeat: no-repeat;
  position: absolute;
  z-index: 1;
  border: none;
}

#posterButton:hover{
  
  background-image: url('/go.png');
}


#leaveButton{
  background-image: url('/exit.gif');
  background-size: contain;
  background-color: transparent;
  background-repeat: no-repeat;
  background-position: center;
  position: absolute;
  z-index: 1;
  border: none;
}

#leaveButton:hover{
  background-image: url('/exit.png');
  background-size: contain;
  background-repeat: no-repeat;
}

#potButton2{
  background-image: url('/go.gif');
  background-size: contain;
  background-color: transparent;
  background-repeat: no-repeat;
  background-position: center;
  position: absolute;
  z-index: 1;
  border: none;
}

#potButton2:hover{
  background-image: url('/go.png');
  background-size: contain;
  background-repeat: no-repeat;
}

================
File: test.js
================
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';
import { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';
import { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader.js';
import { showInfoDiv } from './showInfoDiv.js'; // 导入 showInfoDiv 函数

let scene, camera, renderer, composer, model, raycaster, mouse;
const objects = [];

init();
animate();

function init() {
  const container = document.createElement('div');
  container.className = 'three-container';
  document.body.appendChild(container);

  // Scene
  scene = new THREE.Scene();

  // Grid Helper
  const gridHelper = new THREE.GridHelper(100, 100); // 参数分别是大小和步数
  scene.add(gridHelper);

  // Renderer
  renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  // renderer.setPixelRatio(window.devicePixelRatio);
  renderer.shadowMap.enabled = true; // 启用阴影
  renderer.shadowMap.type = THREE.PCFSoftShadowMap; // 使用柔和阴影
  renderer.toneMapping = THREE.ReinhardToneMapping; // 设置色调映射
  renderer.toneMappingExposure = 1; // 增加曝光
  renderer.outputEncoding = THREE.sRGBEncoding;
  container.appendChild(renderer.domElement);

  // Camera
  camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 2000);
  camera.position.set(5.04, 1.03, -1.53);
  camera.rotation.set(0, 14.29, 0);

  // Raycaster
  raycaster = new THREE.Raycaster();
  mouse = new THREE.Vector2();

  // Load GLB model
  const loader = new GLTFLoader();
  loader.load('5.glb', function(gltf) {
    model = gltf.scene;
    model.traverse((child) => {
      if (child.isMesh) {
        console.log(child.name); // 输出模型名称到控制台
        child.castShadow = true;
        child.receiveShadow = true;
        objects.push(child); // Add mesh to objects array
      }
    });
    
    scene.add(model);
  }, undefined, function(error) {
    console.error(error);
  });

  // Postprocessing
  composer = new EffectComposer(renderer);

  // Render pass
  const renderPass = new RenderPass(scene, camera);
  composer.addPass(renderPass);

  // Gamma correction pass
  const gammaCorrectionPass = new ShaderPass(GammaCorrectionShader);
  composer.addPass(gammaCorrectionPass);

  // FXAA pass
  const fxaaPass = new ShaderPass(FXAAShader);
  const pixelRatio = renderer.getPixelRatio();
  fxaaPass.material.uniforms['resolution'].value.x = 1 / (window.innerWidth * pixelRatio);
  fxaaPass.material.uniforms['resolution'].value.y = 1 / (window.innerHeight * pixelRatio);
  composer.addPass(fxaaPass);

  // Handle window resize
  window.addEventListener('resize', onWindowResize, false);

  // Mouse click event listener
  window.addEventListener('click', onMouseClick, false);

  // Button event listeners
  document.getElementById('pos-x-increase-button').addEventListener('click', () => moveCamera('x', 1));
  document.getElementById('pos-y-increase-button').addEventListener('click', () => moveCamera('y', 1));
  document.getElementById('pos-z-increase-button').addEventListener('click', () => moveCamera('z', 1));
  document.getElementById('rot-x-increase-button').addEventListener('click', () => rotateCamera('x', 10));
  document.getElementById('rot-y-increase-button').addEventListener('click', () => rotateCamera('y', 10));
  document.getElementById('rot-z-increase-button').addEventListener('click', () => rotateCamera('z', 10));

  document.getElementById('pos-x-decrease-button').addEventListener('click', () => moveCamera('x', -1));
  document.getElementById('pos-y-decrease-button').addEventListener('click', () => moveCamera('y', -1));
  document.getElementById('pos-z-decrease-button').addEventListener('click', () => moveCamera('z', -1));
  document.getElementById('rot-x-decrease-button').addEventListener('click', () => rotateCamera('x', -10));
  document.getElementById('rot-y-decrease-button').addEventListener('click', () => rotateCamera('y', -10));
  document.getElementById('rot-z-decrease-button').addEventListener('click', () => rotateCamera('z', -10));

  // Initial update of camera info
  updateCameraInfo();
}

function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(window.innerWidth, window.innerHeight);
  composer.setSize(window.innerWidth, window.innerHeight);
}

function onMouseClick(event) {
  // Normalize mouse coordinates to [-1, 1]
  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

  // Update the picking ray with the camera and mouse position
  raycaster.setFromCamera(mouse, camera);

  // Calculate objects intersecting the picking ray
  const intersects = raycaster.intersectObjects(objects);

  if (intersects.length > 0) {
    const intersectedObject = intersects[0].object;
    console.log(intersectedObject.name); // 输出被点击对象的名称

    // Check if the clicked object is the specific model
    if (intersectedObject.name === 'zhuozil') {
      const targetPosition = new THREE.Vector3(3.1, 0.78, -0.88); // 设定摄像头的新位置
      showInfoDiv(intersectedObject.name, camera, targetPosition);
    }
  }
}

function animate() {
  requestAnimationFrame(animate);

  // Render scene with composer
  composer.render();

  // Update camera info javascript
  updateCameraInfo();
}

function moveCamera(axis, amount) {
  camera.position[axis] += amount;
  updateCameraInfo();
}

function rotateCamera(axis, degrees) {
  camera.rotation[axis] += THREE.MathUtils.degToRad(degrees);
  updateCameraInfo();
}

function updateCameraInfo() {
  const position = camera.position;
  const rotation = camera.rotation;
  document.getElementById('camera-position').innerText = `Position: x=${position.x.toFixed(2)}, y=${position.y.toFixed(2)}, z=${position.z.toFixed(2)}`;
  document.getElementById('camera-rotation').innerText = `Rotation: x=${rotation.x.toFixed(2)}, y=${rotation.y.toFixed(2)}, z=${rotation.z.toFixed(2)}`;
}

================
File: video-loader.js
================
document.addEventListener('DOMContentLoaded', function () {
    // 视频 ID 列表
    var videoIds = ['foregroundVideoContainer', 'backgroundVideo', 'light', 'introVideo','loadingVideo'];

    // 每个视频的源文件映射
    var videoSources = {
        'foregroundVideoContainer': {
            webm: 'scene.webm',
            mov: 'scene.mov'
        },
        'backgroundVideo': {
            webm: 'resturant.webm',
            mov: 'resturant.mov'
        },
        'light': {
            webm: 'opening.webm',
            mov: 'opening.mov'
        },
        'introVideo': {
            webm: 'next.webm',
            mov: 'output.mov'
        },
        'loadingVideo': {
            webm: 'loading.webm',
            mov: 'loading.mov'
        }
    };

    // 处理每个视频的函数
    function handleVideoFormat(videoId) {
        var video = document.getElementById(videoId);
        if (!video) {
            console.error(`Video element with ID '${videoId}' not found.`);
            return;
        }
        
        if (typeof video.canPlayType !== 'function') {
            console.error(`Element with ID '${videoId}' is not a valid video element.`);
            return;
        }

        var sources = videoSources[videoId];
        if (!sources) {
            console.error(`No sources defined for video element with ID '${videoId}'.`);
            return;
        }

        // 优先检查 mov 格式支持
        if (video.canPlayType('video/quicktime')) {
            video.src = sources.mov;
        } else if (video.canPlayType('video/webm; codecs="vp9, opus"')) {
            // 检查 webm 格式支持
            video.src = sources.webm;
        } else {
            console.log('No supported video format found for video:', videoId);
        }

        video.load();
        video.play();
    }

    // 处理所有视频
    videoIds.forEach(function (videoId) {
        handleVideoFormat(videoId);
    });
});

================
File: vite.config.js
================
import { defineConfig } from 'vite'

export default defineConfig({
  base: './', // 基础路径根据你的部署环境进行调整
  build: {
    rollupOptions: {
      output: {
        // 手动拆分 chunk，将大的依赖分离出来，减少主文件的大小
        manualChunks: {
          vendor: ['three'], // 例如，将 three.js 打包到单独的 chunk 中
        },
      },
    },
    // 调整 chunk 大小警告限制，避免警告
    chunkSizeWarningLimit: 1000, // 可以根据需要提高此值，默认500kB，这里设为1000kB
  },
})
